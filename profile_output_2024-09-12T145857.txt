Timer unit: 1e-09 s

Total time: 4.26788 s
File: /home/mde/repos/ndsm/brain.py
Function: learn at line 188

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   188                                               @line_profiler.profile
   189                                               def learn(self) :
   190      2577  166974156.0  64794.0      3.9          self.n_model.train()
   191      2577  230689372.0  89518.6      5.4          self.optimizer.zero_grad()
   192      2577    3036116.0   1178.2      0.1          self.learning_rate = 10.0**(self.learning_rate_exponent) * (not self.ZERO_LEARNING_RATE)
   193      5154    1684540.0    326.8      0.0          for g in self.optimizer.param_groups:
   194      2577     760447.0    295.1      0.0              g['lr'] = self.learning_rate
   195                                           
   196      2577  110878887.0  43026.3      2.6          loss_fn = nn.CrossEntropyLoss()
   197                                           
   198                                                   # inputs = []
   199                                                   # outputs = []
   200                                                   # for τ in range(1,1+self.β): 
   201                                                   #     i,o = self.get_learning_pair(τ=self.model.it-τ)
   202                                                   #     inputs.append(i)
   203                                                   #     outputs.append(o)
   204                                                   # inputs = np.array(inputs)
   205                                                   # outputs = np.array(outputs)
   206                                           
   207      2577    1021558.0    396.4      0.0          r = self.model.it % self.β
   208      2577  296147965.0 114919.7      6.9          i,o = self.get_learning_pair(τ=self.model.it-1)
   209      2577    6195402.0   2404.1      0.1          self.training_input_matrix[r,:] = i
   210      2577    2954387.0   1146.4      0.1          self.training_output_matrix[r,:] = o
   211                                           
   212                                                   # print(self.model.it)
   213                                                   # if self.model.it > self.β :
   214                                                   #     print('-------------------------------')
   215                                                   #     print(outputs)
   216                                                   #     print(self.training_output_matrix)
   217                                                   #     assert(np.sum(outputs) == np.sum(self.training_output_matrix))
   218                                                   #     assert(np.all(outputs == self.training_output_matrix))
   219                                                   #     assert(np.all(inputs == self.training_input_matrix))        
   220                                           
   221      2577  427693795.0 165965.8     10.0          nn_input = torch.tensor(self.training_input_matrix,dtype=torch.float32).to(self.device)
   222      2577  466257683.0 180930.4     10.9          correct_nn_output = torch.tensor(self.training_output_matrix,dtype=torch.float32).to(self.device)
   223                                           
   224      2577  503129911.0 195238.6     11.8          model_out = self.n_model(nn_input)
   225      2577  246580259.0  95685.0      5.8          loss = loss_fn(model_out,correct_nn_output)
   226                                           
   227                                                   # Backpropagation
   228      2577  920369959.0 357147.8     21.6          loss.backward()
   229      2577  471698587.0 183041.7     11.1          self.optimizer.step()
   230                                           
   231      2576  411811477.0 159864.7      9.6          self.prediction_error = loss.item()

  4.27 seconds - /home/mde/repos/ndsm/brain.py:188 - learn

Timer unit: 1e-09 s

Total time: 1.20016 s
File: /home/mde/repos/ndsm/brain.py
Function: learn at line 187

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   187                                               @line_profiler.profile
   188                                               def learn(self) :
   189      1026   50833397.0  49545.2      4.2          self.n_model.train()
   190      1026   71363663.0  69555.2      5.9          self.optimizer.zero_grad()
   191      1026     898619.0    875.8      0.1          self.learning_rate = 10.0**(self.learning_rate_exponent) * (not self.ZERO_LEARNING_RATE)
   192      2052     541011.0    263.7      0.0          for g in self.optimizer.param_groups:
   193      1026     253084.0    246.7      0.0              g['lr'] = self.learning_rate
   194                                           
   195      1026   35772057.0  34865.6      3.0          loss_fn = nn.CrossEntropyLoss()
   196                                           
   197                                                   # inputs = []
   198                                                   # outputs = []
   199                                                   # for τ in range(1,1+self.β): 
   200                                                   #     i,o = self.get_learning_pair(τ=self.model.it-τ)
   201                                                   #     inputs.append(i)
   202                                                   #     outputs.append(o)
   203                                                   # inputs = np.array(inputs)
   204                                                   # outputs = np.array(outputs)
   205                                           
   206      1026     297372.0    289.8      0.0          r = self.model.it % self.β
   207      1026   92494467.0  90150.6      7.7          i,o = self.get_learning_pair(τ=self.model.it-1)
   208      1026    1803069.0   1757.4      0.2          self.training_input_matrix[r,:] = i
   209      1026     662003.0    645.2      0.1          self.training_output_matrix[r,:] = o
   210                                           
   211                                                   # print(self.model.it)
   212                                                   # if self.model.it > self.β :
   213                                                   #     print('-------------------------------')
   214                                                   #     print(outputs)
   215                                                   #     print(self.training_output_matrix)
   216                                                   #     assert(np.sum(outputs) == np.sum(self.training_output_matrix))
   217                                                   #     assert(np.all(outputs == self.training_output_matrix))
   218                                                   #     assert(np.all(inputs == self.training_input_matrix))        
   219                                           
   220      1026   75414551.0  73503.5      6.3          nn_input = torch.tensor(self.training_input_matrix,dtype=torch.float32).to(self.device)
   221      1026  119054457.0 116037.5      9.9          correct_nn_output = torch.tensor(self.training_output_matrix,dtype=torch.float32).to(self.device)
   222                                           
   223      1026  143150399.0 139522.8     11.9          model_out = self.n_model(nn_input)
   224      1026   82659938.0  80565.2      6.9          loss = loss_fn(model_out,correct_nn_output)
   225                                           
   226                                                   # Backpropagation
   227      1026  271116369.0 264246.0     22.6          loss.backward()
   228      1026  151334981.0 147500.0     12.6          self.optimizer.step()
   229                                           
   230      1026  102509647.0  99911.9      8.5          self.prediction_error = loss.item()

  1.20 seconds - /home/mde/repos/ndsm/brain.py:187 - learn
